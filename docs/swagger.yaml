definitions:
  entity.Project:
    properties:
      code:
        type: string
      deleted:
        type: boolean
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  entity.Todo:
    properties:
      created_at:
        type: string
      deleted:
        type: boolean
      finish_at:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      name:
        type: string
      parent_id:
        type: string
      project_id:
        type: string
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      project_ids:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  project.CreateBody:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  project.CreateResponse:
    properties:
      data:
        $ref: '#/definitions/entity.Project'
      message:
        type: string
      success:
        type: boolean
    type: object
  project.GetAllResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.Project'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  todo.CreateBody:
    properties:
      name:
        type: string
      parent_id:
        type: string
      project_id:
        type: string
    type: object
  todo.CreateResponse:
    properties:
      data:
        $ref: '#/definitions/entity.Todo'
      message:
        type: string
      success:
        type: boolean
    type: object
  todo.GetAllResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.Todo'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  user.CreateBody:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  user.CreateResponse:
    properties:
      data:
        $ref: '#/definitions/entity.User'
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: Uh, i create this because i want to autogenerated my todos to pdf.
  title: Avei Todos API with Fiber and Clean Architecture
  version: "1.0"
paths:
  /v1/projects:
    post:
      consumes:
      - application/json
      description: Create Project
      parameters:
      - description: Create Project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.CreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/project.CreateResponse'
      summary: Create Project
      tags:
      - Project
  /v1/projects/:
    get:
      consumes:
      - application/json
      description: Get Project
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.GetAllResponse'
      summary: Get Project
      tags:
      - Project
  /v1/todos:
    post:
      consumes:
      - application/json
      description: Create a todo
      parameters:
      - description: Create Todo
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/todo.CreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/todo.CreateResponse'
      summary: Create a todo
      tags:
      - Todos
  /v1/todos/:
    get:
      consumes:
      - application/json
      description: Get todo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.GetAllResponse'
      summary: Get todo
      tags:
      - Todos
  /v1/users:
    post:
      consumes:
      - application/json
      description: Create an User
      parameters:
      - description: Create User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.CreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateResponse'
      summary: Create an User
      tags:
      - Users
swagger: "2.0"
